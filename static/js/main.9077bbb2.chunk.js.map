{"version":3,"sources":["components/Home.js","helpers/storage.js","components/ButtonLink.js","components/QueueTextbox.js","components/EvgaQueue.js","components/RadioButtonGroup.js","components/PigGameSetup.js","components/PigGame.js","App.js","reportWebVitals.js","index.js"],"names":["Home","href","target","storage","window","localStorage","set","key","value","JSON","stringify","get","parse","ButtonLink","onClick","className","children","type","QueueTextbox","props","onChange","e","currentTarget","setState","rawValue","onSave","state","trim","isEditMode","setEditMode","render","placeholder","display","Component","getStorage","sku","obj","hide","myQueue","val","Object","assign","formatDate","dateStr","isPt","date","Date","toLocaleString","timeZone","categories","getCategory","item","i","length","name","indexOf","expectedFormatReg","setMyQueueDisplay","timestampNA","raw","m","match","timestampDate","diff","valueOf","diffDisplay","diffUnit","toPrecision","Math","floor","EvgaQueue","refreshData","self","fetch","then","res","json","data","map","d","productLink","timestamp","updated","updatedAt","toLocaleDateString","category","error","lastRefresh","catch","finally","loading","componentDidMount","toggleShowHidden","prev","showHidden","toggleSku","cur","updateMyQueue","renderCategoryRows","renderData","filter","show","some","colSpan","rel","c","RadioButtonGroup","onSelect","opt","options","selected","htmlFor","label","id","autoComplete","checked","PigGameSetup","onPlayerCountSelect","viaRadio","players","moreValue","more","Number","onSetupComplete","names","playTo","onMoreUpdate","num","onNameUpdate","idx","v","gotoNextStep","stage","Array","fill","n","gotoPrevStep","renderPlayerSelection","renderNameSelection","s","scope","missingNames","disabled","radioValue","class","for","initialNames","PigGame","config","game","score","currentPlayer","roundPlays","mode","endOfTurn","onModeChange","addRoundScore","concat","undo","slice","getRoundScore","reduce","total","onOinkerOrPigOut","isOinker","roundScore","currentScore","onTurnComplete","enterWinningRound","newState","p","newScore","isFinalScore","finalRoundStarter","winnerIdx","winnerScore","player","onNewGame","renderAdvancedScoring","renderAddButton","scoreboard","renderScoreboard","winner","App","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9077bbb2.chunk.js","sourcesContent":["\r\nexport default function Home(){\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li><a href=\"https://github.com/tirish\" target=\"_blank\">Github</a></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}","const storage = window.localStorage || {};\r\n\r\nexport function set(key, value){\r\n    storage[key] = JSON.stringify(value);\r\n}\r\n\r\nexport function get(key){\r\n    const value = storage[key];\r\n    try {\r\n        return JSON.parse(value);\r\n    } catch {\r\n        return value;\r\n    }\r\n}\r\n","import './ButtonLink.css';\r\n\r\nexport default function ButtonLink({onClick, className, children}) {\r\n    return (\r\n        <button type=\"button\" className={`ButtonLink-btn ${className}`} onClick={onClick}>{children}</button>\r\n    );\r\n}","import { Component } from 'react';\r\nimport ButtonLink from './ButtonLink';\r\n\r\nexport default class QueueTextbox extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            rawValue: '',\r\n            isEditMode: false\r\n        };\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const value = (e?.currentTarget?.value || '');\r\n        this.setState({ rawValue: value });\r\n    };\r\n\r\n    onSave = () => {\r\n        const value = (this.state.rawValue || '').trim();\r\n        this.props.onSave?.(value);\r\n        this.setState({ isEditMode: false });\r\n    };\r\n\r\n    setEditMode = (isEditMode) => {\r\n\r\n        if(isEditMode){\r\n            this.setState({ rawValue: this.props.rawValue || '', isEditMode: true });\r\n        } else {\r\n            this.setState({ isEditMode: false })\r\n        }\r\n\r\n    };\r\n\r\n    render = () => {\r\n\r\n        if(this.state.isEditMode){\r\n            return (\r\n                <div className=\"QueueTextbox-editmode\">\r\n                    <input className=\"QueueTextbox-textbox\" type=\"text\" value={this.state.rawValue} onChange={(e) => this.onChange(e)} placeholder={this.props.placeholder} />\r\n                    <span className=\"QueueTextbox-buttonbar\">\r\n                        <ButtonLink onClick={() => this.onSave()}>Save</ButtonLink> | <ButtonLink onClick={() => this.setEditMode(false)}>Cancel</ButtonLink>\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"QueueTextbox-displaymode\">\r\n                <span className=\"QueueTextbox-display\">{this.props.display || ''}</span>\r\n                <ButtonLink className=\"QueueTextbox-editlink\" onClick={() => this.setEditMode(true)}>{this.props.display ? 'Edit' : 'Set'}</ButtonLink>\r\n            </div>\r\n        );\r\n    };\r\n\r\n}","import { Component } from 'react';\r\nimport * as storage from '../helpers/storage';\r\nimport './EvgaQueue.css';\r\nimport ButtonLink from './ButtonLink';\r\nimport QueueTextbox from './QueueTextbox';\r\n\r\nconst apiUrl = 'https://e35-queue-tracker-api.herokuapp.com/product/?sortBy=sku:desc';\r\n\r\nconst getStorage = (sku) => {\r\n    let obj = { hide: false, myQueue: {} };\r\n    let val = storage.get(sku) || {};\r\n    Object.assign(obj, val);\r\n    return obj;\r\n};\r\n\r\nconst formatDate = (dateStr, isPt) => {\r\n\r\n    if(!dateStr) return '';\r\n\r\n    const date = new Date(dateStr);\r\n    // isPt -> server kicks back date as UTC but the value is actually a PT date\r\n    return isPt ? date.toLocaleString('en-US', { timeZone: 'UTC'}): date.toLocaleString('en-US');\r\n};\r\n\r\nconst formatDateOnly = (dateStr) => {\r\n    if(!dateStr) return '';\r\n    const date = new Date(dateStr);\r\n    return date.toLocaleDateString('en-US');\r\n};\r\n\r\n//substrings -- order matters since this is the order the substring matching is run\r\nconst categories = [\r\n    '3090',\r\n    '3080 Ti',\r\n    '3080',\r\n    '3070 Ti',\r\n    '3070',    \r\n    '3060 Ti',\r\n    '3060',\r\n    'Misc'\r\n];\r\n    \r\nconst getCategory = (item) => {\r\n    for(let i = 0; i < categories.length; i++){\r\n        if(item.name.indexOf(categories[i]) >= 0){\r\n            return categories[i];\r\n        }\r\n    }\r\n    return 'Misc';\r\n};\r\n\r\nconst expectedFormatReg = /^(\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s+\\d{1,2}:\\d{2}:\\d{2}\\s+[AP]M)(?:\\s+PT)$/;\r\nconst setMyQueueDisplay = (myQueue, timestampNA) => {\r\n    myQueue = myQueue || {};\r\n    const raw = myQueue.raw;\r\n    if(!raw){\r\n        myQueue.display = '';\r\n    } else {\r\n        const m = myQueue.raw.match(expectedFormatReg);\r\n        if(!m || !m.length){\r\n            myQueue.raw = '';\r\n            myQueue.display = '';\r\n        } else {\r\n            const dateStr = m[1] + ' GMT+0000';\r\n            const date = new Date(dateStr);\r\n            myQueue.display = date.toLocaleString('en-US', { timeZone: 'UTC' });\r\n            if(timestampNA){\r\n                const timestampDate = new Date(timestampNA);                \r\n                const diff = date.valueOf() - timestampDate.valueOf();\r\n                let diffDisplay = diff / 1000 / 60;;\r\n                let diffUnit = 'min';\r\n                if(diffDisplay >= 60) {\r\n                    diffDisplay /= 60; // hours\r\n                    diffUnit = 'hr';\r\n                }\r\n                if(diffDisplay >= 24) {\r\n                    diffDisplay /= 24; // days\r\n                    diffUnit = 'days';\r\n                }\r\n                if(diffDisplay < 10){\r\n                    diffDisplay = diffDisplay.toPrecision(2);\r\n                } else {\r\n                    diffDisplay = Math.floor(diffDisplay);\r\n                }\r\n\r\n                const plus = diff > 0 ? '+' : '';\r\n                diffDisplay = `(${plus}${diffDisplay} ${diffUnit})`\r\n                if(diff < 0){\r\n                    // queue has passed\r\n                    myQueue.display = 'Notify Sent ' + diffDisplay;\r\n                } else {\r\n                    myQueue.display += ' ' + diffDisplay;\r\n                }\r\n\r\n            }\r\n        }        \r\n    }\r\n\r\n    return myQueue;\r\n};\r\n\r\nexport default class EvgaQueue extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            showHidden: false\r\n        };\r\n    }\r\n\r\n    refreshData = () => {\r\n        const self = this;\r\n        fetch(apiUrl)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                data = data.map(d => ({\r\n                    sku: d.sku,\r\n                    name: d.name,\r\n                    productLink: 'https://www.evga.com/products/product.aspx?pn=' + d.sku,\r\n                    timestamp: formatDate(d.timestampNA, true),\r\n                    timestampNA: d.timestampNA,\r\n                    updated: formatDateOnly(d.updatedAt),\r\n                    hide: !!getStorage(d.sku).hide || !d.timestampNA,\r\n                    myQueue: setMyQueueDisplay(getStorage(d.sku).myQueue, d.timestampNA),\r\n                    category: getCategory(d)\r\n                }));\r\n                self.setState({ data: data, error: false, lastRefresh: formatDate(new Date()) });\r\n            })\r\n            .catch(() => self.setState({ error: true }))\r\n            .finally(() => self.setState({ loading: false }));\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.refreshData();\r\n    };\r\n\r\n\r\n    toggleShowHidden = () => {\r\n        this.setState(prev => ({ showHidden: !prev.showHidden }));\r\n    }\r\n\r\n    toggleSku = (sku) => {\r\n        const cur = getStorage(sku);\r\n        cur.hide = !cur.hide;\r\n        storage.set(sku, cur);\r\n        const data = this.state.data.map(d => {\r\n            if(d.sku === sku){\r\n                return {\r\n                    ...d,\r\n                    hide: cur.hide\r\n                };\r\n            }\r\n            return d;\r\n        });\r\n        this.setState({ data: data });\r\n    };\r\n\r\n    updateMyQueue = (sku, rawValue) => {\r\n        const cur = getStorage(sku);\r\n        cur.myQueue = cur.myQueue || {};\r\n        cur.myQueue.raw = rawValue;\r\n        storage.set(sku, cur);\r\n\r\n        const data = this.state.data.map(d => {\r\n            if(d.sku === sku){\r\n                return {\r\n                    ...d,\r\n                    myQueue: setMyQueueDisplay({ ...d.myQueue, raw:rawValue }, d.timestampNA)\r\n                };\r\n            }\r\n            return d;\r\n        });\r\n        this.setState({ data: data });\r\n    };\r\n    \r\n    renderCategoryRows = (category) => {\r\n\r\n        const renderData = this.state.data.filter(d => d.category === category).map(d => ({\r\n            ...d,\r\n            show: !d.hide || this.state.showHidden\r\n        }));\r\n\r\n        if(!renderData.some(d => d.show)){\r\n            return (<></>);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <tr className=\"EvgaQueue-table-category-row\">\r\n                    <th colSpan={6}>\r\n                        {category}\r\n                    </th>\r\n                </tr>\r\n                {\r\n                    renderData.map(d => (\r\n                        d.show && (<tr key={d.sku}>\r\n                            <td>\r\n                                <a href={d.productLink} target=\"_blank\" rel=\"noreferrer\">{d.sku}</a>\r\n                            </td>\r\n                            <td>\r\n                                {d.name}\r\n                            </td>\r\n                            <td>\r\n                                {d.timestamp}\r\n                            </td>\r\n                            <td>\r\n                                <QueueTextbox rawValue={d.myQueue.raw} display={d.myQueue.display} onSave={(rawValue) => this.updateMyQueue(d.sku, rawValue)} placeholder='M/d/yyyy h:mm:ss aa PT' />\r\n                            </td>\r\n                            <td>\r\n                                {d.updated}\r\n                            </td>\r\n                            <td>\r\n                                <ButtonLink onClick={() => this.toggleSku(d.sku)}>{d.hide ? 'Show' : 'Hide'}</ButtonLink>\r\n                            </td>\r\n                        </tr>)\r\n                    ))\r\n                }\r\n            </>              \r\n        );\r\n    }\r\n\r\n    render = () => {\r\n\r\n        if(this.state.loading){\r\n            return (<span>Loading...</span>);\r\n        }\r\n        if(this.state.error){\r\n            return (<span>Encountered error</span>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"EvgaQueue-container\">\r\n                <table className=\"EvgaQueue-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>\r\n                                Part Number\r\n                            </th>\r\n                            <th>\r\n                                Name\r\n                            </th>\r\n                            <th>\r\n                                Queue Timestamp (PT)\r\n                            </th>\r\n                            <th>\r\n                                My Queue (PT)\r\n                            </th>\r\n                            <th>\r\n                                Last Update\r\n                            </th>\r\n                            <th>\r\n                                Toggle\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { categories.map(c => this.renderCategoryRows(c))}                    \r\n                    </tbody>\r\n                </table>\r\n                <div className=\"EvgaQueue-showhidden-toggle-container\">\r\n                    <ButtonLink className=\"EvgaQueue-showhidden-toggle\" onClick={() => this.toggleShowHidden()}>{this.state.showHidden ? 'Hide hidden items' : 'Show hidden items'}</ButtonLink>\r\n                </div>\r\n                <div className=\"EvgaQueue-footer\">\r\n                    <div className=\"EvgaQueue-footer-datasource\">\r\n                        <small>Data source: <a href=\"https://www.element35gaming.com/\" target=\"_blank\" rel=\"noreferrer\">https://www.element35gaming.com/</a></small>\r\n                    </div>\r\n                    <div className=\"EvgaQueue-footer-timer\">\r\n                        <small>Last refresh: {this.state.lastRefresh}</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n}\r\n","import { Component } from 'react';\r\n\r\nclass RadioButtonGroup extends Component {\r\n\r\n    onSelect = (opt) => {\r\n        this.props.onSelect?.(opt);\r\n    };\r\n\r\n    render = () => {\r\n        const { options, name, selected } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"input-group input-group-lg\">\r\n                    {options.map(opt => (\r\n                        <label key={opt.value} className={`btn btn-${selected === opt.value ? 'success' : 'outline-primary'}`} htmlFor={`${name}-${opt.value}`}>{opt.label}</label>\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                    {options.map(opt => (\r\n                        <input key={opt.value} type=\"radio\" className=\"btn-check\" name={name} id={`${name}-${opt.value}`} autoComplete=\"off\" checked={selected === opt.value} onChange={() => this.onSelect(opt)} />\r\n                    ))}\r\n                </div>\r\n            </>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default RadioButtonGroup;","import { Component } from 'react';\r\nimport RadioButtonGroup from './RadioButtonGroup';\r\n\r\nclass PigGameSetup extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        const names = props.initialNames || [];\r\n        this.state = {\r\n            players: names.length,\r\n            names: names,\r\n            playTo: 100,\r\n            more: false,\r\n            moreValue: 5,\r\n            stage: names.length > 0 ? 'confirm' : 'players'\r\n        };\r\n    }\r\n\r\n    onPlayerCountSelect = (opt) => {\r\n        if(!opt?.value) return;\r\n\r\n        const viaRadio = !!opt.label;\r\n\r\n        if(opt.value === 'more'){\r\n            this.setState(prev => ({ players: prev.moreValue, more: true}));\r\n        } else {\r\n            this.setState({ players: Number(opt.value), more: !viaRadio });\r\n        }\r\n\r\n    };\r\n\r\n    onSetupComplete = () => {\r\n        this.props.onSetupComplete?.({ names: this.state.names , playTo: this.state.playTo });\r\n    }\r\n\r\n    onMoreUpdate = (val) => {\r\n        const num = val ? Number(val) : 0;\r\n        this.setState({ moreValue: val, players: num });\r\n    };\r\n\r\n    onNameUpdate = (val, idx) => {\r\n        this.setState(prev => ({\r\n            names: prev.names.map((v, i) => {\r\n                if(i === idx){\r\n                    return val;\r\n                }\r\n                return v;\r\n            })\r\n        }));\r\n    };\r\n\r\n    gotoNextStep = () => {\r\n        const cur = this.state.stage;\r\n        if(cur === 'players'){\r\n            if(this.state.players > 0 && this.state.players <= 20) {\r\n                this.setState(prev => {\r\n                    const names = new Array(this.state.players).fill('');\r\n                    for(let i = 0; i < names.length && prev.names.length; i++){\r\n                        names[i] = prev.names[i] || '';\r\n                    }\r\n                    return { stage: 'names', names }\r\n                });\r\n            }\r\n        } else if(cur === 'names'){\r\n            if(!this.state.names.some(n => !(n || '').trim())){\r\n                this.setState({ stage: 'confirm' });\r\n            }\r\n        }\r\n    };\r\n\r\n    gotoPrevStep = () => {\r\n        const cur = this.state.stage;\r\n\r\n        if(cur === 'names'){\r\n            this.setState({ stage: 'players' });\r\n        }\r\n        \r\n        if(cur === 'confirm'){\r\n            this.setState({ stage: 'names' });\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        if(this.state.stage === 'players') {\r\n            return this.renderPlayerSelection();\r\n        }\r\n\r\n        if(this.state.stage === 'names'){\r\n            return this.renderNameSelection();\r\n        }\r\n        // confirm\r\n        const s = this.state.players > 1 ? 's' : '';\r\n        return (\r\n            <div>\r\n                <h3>Confirm</h3>\r\n                <p>{this.state.players} player{s}</p>\r\n                <h4>Player Name{s}</h4>\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.names.map((n, idx) => (\r\n                            <tr key={idx}>\r\n                                <th scope=\"row\">{idx+1}</th>\r\n                                <td>{n}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"mt-4 input-group\">\r\n                    <button type=\"button\" className=\"btn btn-dark\" onClick={this.gotoPrevStep}>Back</button>\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={this.onSetupComplete}>Confirm</button>\r\n                </div>               \r\n            </div>\r\n        )\r\n    };\r\n    \r\n    renderNameSelection = () => {\r\n\r\n        const names = this.state.names;\r\n        const missingNames = names.some(n => !(n || '').trim());\r\n\r\n        return (\r\n            <div>\r\n                <h3>Player Names ({this.state.players})</h3>\r\n                {names.map( (n, idx) => (\r\n                    <div className=\"input-group mb-3\" key={idx}>\r\n                        <span className=\"input-group-text\">{idx+1}</span>\r\n                        <input type=\"text\" className=\"form-control\" value={n} onChange={(e) => this.onNameUpdate(e.currentTarget.value, idx)} />\r\n                    </div>\r\n                ))}\r\n                <div className=\"mt-4 input-group\">\r\n                    <button type=\"button\" className=\"btn btn-dark\" onClick={this.gotoPrevStep}>Back</button>\r\n                    <button type=\"button\" className=\"btn btn-dark\" disabled={missingNames} onClick={this.gotoNextStep}>Next</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    renderPlayerSelection = () => {\r\n\r\n        const options = [\r\n            {\r\n                label: 'One (1)',\r\n                value: 1\r\n            },\r\n            {\r\n                label: 'Two (2)',\r\n                value: 2\r\n            },\r\n            {\r\n                label: 'Three (3)',\r\n                value: 3\r\n            },\r\n            {\r\n                label: 'Four (4)',\r\n                value: 4\r\n            },\r\n            {\r\n                label: 'More?',\r\n                value: 'more'\r\n            }\r\n        ];\r\n\r\n        const radioValue = this.state.more ? 'more' : this.state.players;\r\n\r\n        return (\r\n            <div>\r\n                <h3>Number of Players</h3>\r\n                <RadioButtonGroup options={options} selected={radioValue} onSelect={this.onPlayerCountSelect} />\r\n                { this.state.more ? (\r\n                    <div class=\"mt-3\">\r\n                        <label for=\"morePlayers\" class=\"form-label\">More Players</label>\r\n                        <input type=\"number\" class=\"form-control\" id=\"morePlayers\" value={this.state.moreValue} onChange={(e) => this.onMoreUpdate(e.currentTarget.value)} />\r\n                        { this.state.players <= 0 || this.state.players > 20 ? (<small>Must be between 1 and 20 (inclusive)</small>) : null }\r\n                    </div>\r\n                    ) : null\r\n                }\r\n                <div className=\"mt-4\">\r\n                    <button type=\"button\" className=\"btn btn-dark\" disabled={this.state.players <= 0 || this.state.players > 20} onClick={this.gotoNextStep}>Next</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default PigGameSetup;","import { Component } from 'react';\r\nimport PigGameSetup from './PigGameSetup';\r\nimport RadioButtonGroup from './RadioButtonGroup';\r\nimport * as storage from '../helpers/storage';\r\n\r\nclass PigGame extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            stage: 'setup',\r\n            game: null\r\n        };\r\n    }\r\n\r\n    onSetupComplete = (config) => {\r\n        const game = {\r\n            playTo: config.playTo,\r\n            players: config.names.map(n => ({\r\n                name: n,\r\n                score: 0\r\n            })),\r\n            currentPlayer: 0,\r\n            roundPlays: [],\r\n            mode: storage.get('pig_scoring_mode') || 'basic',\r\n            endOfTurn: false\r\n        };\r\n        this.setState({\r\n            game,\r\n            stage: 'normal_play'\r\n        });\r\n        storage.set('pig_players', config.names);\r\n    };\r\n\r\n    onModeChange = ({ value }) => {\r\n        this.setState(prev => (\r\n            { \r\n                ...prev, \r\n                game: { \r\n                    ...prev.game, \r\n                    mode: value \r\n                }\r\n            }\r\n            ));\r\n        storage.set('pig_scoring_mode', value);\r\n    };\r\n\r\n    addRoundScore = (num, endOfTurn) => {\r\n        this.setState(prev => ({\r\n            ...prev,\r\n            game: {\r\n                ...prev.game,\r\n                endOfTurn,\r\n                roundPlays: [...prev.game.roundPlays].concat([num])\r\n            }\r\n        }))\r\n    };\r\n\r\n    undo = () => {\r\n        if(this.state.game.roundPlays.length > 0){\r\n            this.setState(prev => ({\r\n                ...prev,\r\n                game: {\r\n                    ...prev.game,\r\n                    roundPlays: prev.game.roundPlays.slice(0, -1),\r\n                    endOfTurn: false\r\n                }\r\n            }));\r\n        }\r\n    };\r\n\r\n    getRoundScore = () => this.state.game.roundPlays.length > 0 ? this.state.game.roundPlays.reduce( (n, total) => n + total, 0) : 0;\r\n\r\n    onOinkerOrPigOut = (isOinker) => {\r\n        const currentPlayer = this.state.game.players[this.state.game.currentPlayer];\r\n        const roundScore = this.getRoundScore();\r\n        let currentScore = (isOinker ? currentPlayer.score : 0) + roundScore;\r\n\r\n        // deduct all points\r\n        this.addRoundScore(-1 * currentScore, true);\r\n    };\r\n\r\n    onTurnComplete = () => {\r\n        const roundScore = this.getRoundScore();\r\n        this.setState(prev => {\r\n\r\n            let enterWinningRound = false;\r\n            const newState = {\r\n                ...prev,\r\n                game: {\r\n                    ...prev.game,\r\n                    roundPlays: [],\r\n                    endOfTurn: false,\r\n                    players: prev.game.players.map((p, idx) => {\r\n                        if(prev.game.currentPlayer === idx){\r\n                            // update current player's global score\r\n                            const newScore = p.score + roundScore;\r\n                            let isFinalScore = prev.stage === 'final_round';\r\n                            if(newScore >= prev.game.playTo){\r\n                                enterWinningRound = true;\r\n                                isFinalScore = true;\r\n                            }\r\n                            return {\r\n                                ...p,\r\n                                score: newScore,\r\n                                isFinalScore,\r\n                                finalRoundStarter: enterWinningRound && prev.stage !== 'final_round'\r\n                            };\r\n                        }\r\n                        return p;\r\n                    })\r\n                }\r\n            };\r\n\r\n            // goto next player\r\n            newState.game.currentPlayer = (newState.game.currentPlayer+1) % newState.game.players.length;\r\n\r\n            if(enterWinningRound){\r\n                newState.stage = 'final_round';\r\n            }\r\n\r\n            const nextPlayer = newState.game.players[newState.game.currentPlayer];\r\n            if(nextPlayer.finalRoundStarter){\r\n                newState.stage = 'game_over';\r\n\r\n                let winnerIdx = 0;\r\n                let winnerScore = -1;\r\n                for(let i = 0; i < newState.game.players.length; i++){\r\n                    const player = newState.game.players[i];\r\n                    if(player.score > winnerScore){\r\n                        winnerScore = player.score;\r\n                        winnerIdx = i;\r\n                    }\r\n                }\r\n                \r\n                newState.game.winnerIdx = winnerIdx;\r\n            }\r\n\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    onNewGame = () => {\r\n        this.setState({\r\n            game: null,\r\n            stage: 'setup'\r\n        })\r\n    };\r\n\r\n    renderAdvancedScoring = () => {\r\n        \r\n        const renderAddButton = (num) => (\r\n            <div className=\"col\">\r\n                <button type=\"button\" className=\"btn btn-lg btn-dark w-100\" onClick={() => this.addRoundScore(num)} disabled={this.state.game.endOfTurn}>{`+${num}`}</button>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <>\r\n            <div className=\"row mb-3\">\r\n                {renderAddButton(1)}\r\n                {renderAddButton(5)}\r\n                {renderAddButton(10)}\r\n            </div>\r\n            <div className=\"row mb-3\">\r\n                {renderAddButton(15)}\r\n                {renderAddButton(20)}\r\n                {renderAddButton(25)}\r\n            </div>\r\n            <div className=\"row mb-3\">\r\n                {renderAddButton(40)}\r\n                {renderAddButton(60)}\r\n            </div>\r\n            <div className=\"row mb-3\">\r\n                <div className=\"col\">\r\n                    <button type=\"button\" className=\"btn btn-lg btn-warning w-100\" onClick={() => this.onOinkerOrPigOut(false)} disabled={this.state.game.endOfTurn}>Pig Out (Reset Round)</button>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button type=\"button\" className=\"btn btn-lg btn-danger w-100\" onClick={() => this.onOinkerOrPigOut(true)} disabled={this.state.game.endOfTurn}>Oinker (Reset Total Score)</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col\">\r\n                    <button type=\"button\" className=\"btn btn-lg btn-success w-100\" onClick={() => this.onTurnComplete()}>End Turn</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n        );\r\n    };\r\n\r\n    render = () => {\r\n        const { stage, game } = this.state;\r\n        if(stage === 'setup'){\r\n            const initialNames = storage.get('pig_players');\r\n            return (<PigGameSetup onSetupComplete={this.onSetupComplete} initialNames={initialNames} />);\r\n        }\r\n\r\n        const scoreboard = this.renderScoreboard();\r\n        const currentPlayer = game.players[game.currentPlayer];\r\n        const roundScore = this.getRoundScore();\r\n        const scoringModes = [\r\n            {\r\n                label: 'Beginner',\r\n                value: 'basic'\r\n            },\r\n            {\r\n                label: 'Advanced',\r\n                value: 'adv'\r\n            }            \r\n        ];\r\n\r\n        const winner = stage === 'game_over' ? game.players[game.winnerIdx] : null;\r\n\r\n        return (\r\n            <div>\r\n                {stage !== 'game_over' && (\r\n                    <>                        \r\n                        <h3>Scoring Mode</h3>\r\n                        <RadioButtonGroup options={scoringModes} selected={this.state.game.mode} onSelect={this.onModeChange} />\r\n                        <div className=\"mt-3\">\r\n                            {this.state.game.mode === 'adv' && (this.renderAdvancedScoring())}\r\n                            {this.state.game.mode === 'basic' && (<span>Coming soon! Until then, use Advanced scoring.</span>)}\r\n                        </div>\r\n                        <div className=\"mt-4\">\r\n                            <h1>Current Player: {currentPlayer.name}{stage === 'final_round' ? ' (Final Round)' : ''}</h1>\r\n                            <p>{currentPlayer.name} has <strong>{roundScore}</strong> so far for this round. {game.roundPlays.length > 0 && (<span>After this round, total score will be <em>{roundScore + currentPlayer.score}</em></span>)}</p>\r\n                            {game.roundPlays.length > 0 && (\r\n                                <>\r\n                                    <ol>\r\n                                        {game.roundPlays.map((n, idx) => (\r\n                                            <li key={idx}>{n}</li>\r\n                                        ))}\r\n                                    </ol>\r\n                                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.undo}>Undo</button> \r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                )}\r\n                { !!(stage === 'game_over' && winner) && (\r\n                    <>\r\n                        <h1>Winner! {winner.name}</h1>\r\n                        <p>Score: <strong>{winner.score}</strong></p>\r\n                    </>\r\n                )}\r\n                <hr />\r\n                <h3>Scores</h3>\r\n                {scoreboard}\r\n                <div className=\"mt-4\">\r\n                    <button type=\"button\" className=\"btn btn-outline-warning\" onClick={this.onNewGame}>New Game</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    renderScoreboard = () => {\r\n        return (\r\n            <table className=\"table table-dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Score</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.game.players.map((p, idx) => (\r\n                        <tr key={idx}>\r\n                            <th scope=\"row\">{idx+1}</th>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.score}{p.isFinalScore ? ' (Final)' : ''}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default PigGame;","import './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport EvgaQueue from './components/EvgaQueue';\nimport PigGame from './components/PigGame';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/evgaQueue\">EVGA Queue</Link>\n              </li>\n              <li>\n                <Link to=\"/pigs\">Pig Game</Link>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <section className=\"App-content\">\n          <Switch>\n            <Route path=\"/pigs\">\n              <PigGame />\n            </Route>\n            <Route path=\"/evgaQueue\"> \n              <EvgaQueue />\n            </Route>            \n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>        \n        </section>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}